""" Class for solve function results"""
import numpy as np
from ..core import Qobj, QobjEvo, expect
import functools

__all__ = ["Result", "MultiTrajResult", "McResult"]


class _QobjExpectEop:
    """
    Pickable e_ops callable that calculates the expectation value for a given
    operator.

    Parameters
    ----------
    op : :obj:`~Qobj`
        The expectation value operator.
    """
    def __init__(self, op):
        self.op = op

    def __call__(self, t, state):
        return expect(self.op, state)


class ExpectOp:
    """
    A result e_op (expectation operation).

    Parameters
    ----------
    op : object
        The original object used to define the e_op operation, e.g. a
        :~obj:`Qobj` or a function ``f(t, state)``.

    f : function
        A callable ``f(t, state)`` that will return the value of the e_op
        for the specified state and time.

    append : function
        A callable ``append(value)``, e.g. ``expect[k].append``, that will
        store the result of the e_ops function ``f(t, state)``.

    Attributes
    ----------
    op : object
        The original object used to define the e_op operation.
    """
    def __init__(self, op, f, append):
        self.op = op
        self._f = f
        self._append = append

    def __call__(self, t, state):
        """
        Return the expectation value for the given time, ``t`` and
        state, ``state``.
        """
        return self._f(t, state)

    def _store(self, t, state):
        """
        Store the result of the e_op function. Should only be called by
        :class:`~Result`.
        """
        self._append(self._f(t, state))


class Result:
    """
    Base class for storing solver results.

    Parameters
    ----------
    e_ops : :obj:`~Qobj`, :obj:`~QobjEvo`, function or list or dict of these
        The ``e_ops`` parameter defines the set of values to record at
        each time step ``t``. If an element is a :obj:`~Qobj` or
        :obj:`~QobjEvo` the value recorded is the expectation value of that
        operator given the state at ``t``. If the element is a function, ``f``,
        the value recorded is ``f(t, state)``.

        The values are recorded in the ``.expect`` attribute of this result
        object. ``.expect`` is a list, where each item contains the values
        of the corresponding ``e_op``.

    options : :obj:`~SolverResultsOptions`
        The options for this result class.

    solver : str or None
        The name of the solver generating these results.

    stats : dict or None
        The stats generated by the solver while producing these results. Note
        that the solver may update the stats directly while producing results.

    kw : dict
        Additional parameters specific to a result sub-class.

    Properties
    ----------
    times : list
        A list of the times at which the expectation values and states were
        recorded.

    states : list of :obj:`~Qobj`
        The state at each time ``t`` (if the recording of the state was
        requested).

    final_state : :obj:`~Qobj:
        The final state (if the recording of the final state was requested).

    expect : list of lists of expectation values
        A list containing the values of each ``e_op``. The list is in
        the same order in which the ``e_ops`` were supplied and empty if
        no ``e_ops`` were given.

        Each element is itself a list and contains the values of the
        corresponding ``e_op``, with one value for each time in ``.times``.

        The same lists of values may be accessed via the ``.e_data`` dictionary
        and the original ``e_ops`` are available via the ``.e_ops`` attribute.

    e_data : dict
        A dictionary containing the values of each ``e_op``. If the ``e_ops``
        were supplied as a dictionary, the keys are the same as in
        that dictionary. Otherwise the keys are the index of the ``e_op``
        in the ``.expect`` list.

        The lists of expectation values returned are the *same* lists as
        those returned by ``.expect``.

    e_ops : dict
        A dictionary containing the supplied e_ops as ``ExpectOp`` instances.
        The keys of the dictionary are the same as for ``.e_data``.
        Each value is object where ``.e_ops[k](t, state)`` calculates the
        value of ``e_op`` ``k`` at time ``t`` and the given ``state``, and
        ``.e_ops[k].op`` is the original object supplied to create the
        ``e_op``.

    solver : str or None
        The name of the solver generating these results.

    stats : dict or None
        The stats generated by the solver while producing these results.

    options : :obj:`~SolverResultsOptions`
        The options for this result class.
    """
    def __init__(self, e_ops, options, *, solver=None, stats=None, **kw):
        self.solver = solver
        self.stats = stats

        self._state_processors = []
        self._state_processors_require_copy = False

        raw_ops = self._e_ops_to_dict(e_ops)
        self.e_data = {k: [] for k in raw_ops}
        self.expect = list(self.e_data.values())
        self.e_ops = {}
        for k, op in raw_ops.items():
            f = self._e_op_func(op)
            self.e_ops[k] = ExpectOp(op, f, self.e_data[k].append)
            self.add_processor(self.e_ops[k]._store)

        self.options = options

        self.times = []
        self.states = []
        self.final_state = None

        self._post_init(**kw)

    def _e_ops_to_dict(self, e_ops):
        """ Convert the supplied e_ops to a dictionary of Eop instances. """
        if e_ops is None:
            e_ops = {}
        elif isinstance(e_ops, (list, tuple)):
            e_ops = {k: e_op for k, e_op in enumerate(e_ops)}
        elif isinstance(e_ops, dict):
            pass
        else:
            e_ops = {0: e_ops}
        return e_ops

    def _e_op_func(self, e_op):
        """
        Convert an e_op entry into a function, ``f(t, state)`` that returns
        the appropriate value (usually an expectation value).

        Sub-classes may override this function to calculate expectation values
        in different ways.
        """
        if isinstance(e_op, Qobj):
            return _QobjExpectEop(e_op)
        elif isinstance(e_op, QobjEvo):
            return e_op.expect
        elif callable(e_op):
            return e_op
        raise TypeError(f"{e_op!r} has unsupported type {type(e_op)!r}.")

    def _post_init(self):
        """
        Perform post __init__ initialisation. In particular, add state
        processors or pre-processors.

        Sub-class may override this. If the sub-class wishes to register the
        default processors for storing states, it should call this parent
        ``.post_init()`` method.

        Sub-class ``.post_init()`` implementation may take additional keyword
        arguments if required.
        """
        store_states = self.options['store_states']
        store_final_state = self.options['store_final_state']

        if store_states is None:
            store_states = len(self.e_ops) == 0
        if store_states:
            self.add_processor(self._store_state, requires_copy=True)

        if store_states or store_final_state:
            self.add_processor(self._store_final_state, requires_copy=True)

    def _store_state(self, t, state):
        """ Processor that stores a state in ``.states``. """
        self.states.append(state)

    def _store_final_state(self, t, state):
        """ Processor that writes the state to ``.final_state``. """
        self.final_state = state

    def _pre_copy(self, state):
        """ Return a copy of the state. Sub-classes may override this to
            copy a state in different manner or to skip making a copy
            altogether if a copy is not necessary.
        """
        return state.copy()

    def add_processor(self, f, requires_copy=False):
        """
        Append a processor ``f`` to the list of state processors.

        Parameters
        ----------
        f : function, ``f(t, state)``
            A function to be called each time a state is added to this
            result object. The state is the state passed to ``.add``, after
            applying the pre-processors, if any.

        requires_copy : bool, default False
            Whether this processor requires a copy of the state rather than
            a reference. A processor must never modify the supplied state, but
            if a processor stores the state it should set ``require_copy`` to
            true.
        """
        self._state_processors.append(f)
        self._state_processors_require_copy |= requires_copy

    def add(self, t, state):
        """
        Add a state to the results for the time ``t`` of the evolution.

        Adding a state calculates the expectation value of the state for
        each of the supplied ``e_ops`` and stores the result in ``.expect``.

        The state is recorded in ``.states`` and ``.final_state`` if specified
        by the supplied result options.

        Parameters
        ----------
        t : float
            The time of the added state.

        state : typically a :obj:`~Qobj`
            The state a time ``t``. Usually this is a :obj:`~Qobj` with
            suitable dimensions, but it sub-classes of result might support
            other forms of the state.

        .. note::

           The expectation values, i.e. ``e_ops``, and states are recorded by
           the state processors (see ``.add_processor``).

           Additional processors may be added by sub-classes.
        """
        self.times.append(t)

        if self._state_processors_require_copy:
            state = self._pre_copy(state)

        for op in self._state_processors:
            op(t, state)

    def __repr__(self):
        lines = [
            f"<{self.__class__.__name__}",
            f"  Solver: {self.solver}",
        ]
        if self.stats:
            lines.append("  Solver stats:")
            lines.extend(
                f"    {k}: {v!r}"
                for k, v in self.stats.items()
            )
        if self.times:
            lines.append(
                f"  Time interval: [{self.times[0]}, {self.times[-1]}]"
                f" ({len(self.times)} steps)"
            )
        lines.append(f"  Number of e_ops: {len(self.e_ops)}")
        if self.states:
            lines.append("  States saved.")
        elif self.final_state is not None:
            lines.append("  Final state saved.")
        else:
            lines.append("  State not saved.")
        lines.append(">")
        return "\n".join(lines)


def _e_data_2_expect(f):
    """
    Create a method returning a list from one that return a dict.
    This transform the ``e_data`` properties to ``expect`` ones.
    """
    is_property = isinstance(f, property)
    if is_property: f = f.fget

    def flatten(*args, **kwargs):
        return list(f(*args, **kwargs).values())
    doc = f.__doc__.split('/n')[:-1]
    doc.append("            expect : list")
    flatten.__doc__ = "\n".join(doc)

    if is_property: flatten = property(flatten)
    return flatten


class MultiTrajResult(Result):
    """
    Base class for storing solver results.

    Parameters
    ----------
    e_ops : :obj:`~Qobj`, :obj:`~QobjEvo`, function or list or dict of these
        The ``e_ops`` parameter defines the set of values to record at
        each time step ``t``. If an element is a :obj:`~Qobj` or
        :obj:`~QobjEvo` the value recorded is the expectation value of that
        operator given the state at ``t``. If the element is a function, ``f``,
        the value recorded is ``f(t, state)``.

        The values are recorded in the ``.expect`` attribute of this result
        object. ``.expect`` is a list, where each item contains the values
        of the corresponding ``e_op``.

    options : :obj:`~SolverResultsOptions`
        The options for this result class.

    solver : str or None
        The name of the solver generating these results.

    stats : dict or None
        The stats generated by the solver while producing these results. Note
        that the solver may update the stats directly while producing results.

    kw : dict
        Additional parameters specific to a result sub-class.
    """
    _sum_states = None
    _sum_final_states = None
    _sum_expect = None
    _sum2_expect = None
    _target_tols = None
    _tol_reached = False

    @staticmethod
    def _to_dm(state):
        if state.type == 'ket':
            state = state.proj()
        return state

    def _add_first_traj(self, trajectory):
        """
        Read the first trajectory, intitializing needed data.
        """
        self.times = trajectory.times

        if trajectory.states:
            self._sum_states = [qutip.qzeros(state.dims[0])
                                for state in trajectory.states]
        if trajectory.final_state:
            self._sum_final_states = qutip.qzeros(state.dims[0])

        self._sum_expect = np.array(trajectory.expect) * 0.
        self._sum2_expect = np.array(trajectory.expect) * 0.

        self.e_ops = trajectory.e_ops

    def _store_trajectory(self, trajectory):
        self.trajectories.append(trajectory)

    def _store_seed(self, trajectory):
        self.seeds.append(trajectory.seed)

    def _reduce_states(self, trajectory):
        self._sum_states = [
            accu + self._to_dm(state)
            for accu, state
            in zip(self._sum_states, trajectory.states)
        ]

    def _reduce_final_state(self, trajectory):
        self._sum_final_states += self._proj(trajectory.final_state)

    def _reduce_expect(self, trajectory):
        self._sum_expect += np.array(trajectory.expect)
        self._sum2_expect += np.abs(np.array(trajectory.expect))**2

    def _no_end(self):
        """
        Remaining number of trajectories needed to finish cannot be determined
        by this object.
        """
        return np.inf

    def _fixed_end(self):
        """
        Finish at a known number of trajectories.
        """
        return self._target_ntraj - self.num_trajectories

    def _estimated_trajectories_to_target_tolerance(self):
        """
        Compute the error on the expectation values using jackknife resampling.
        Return the approximate number of trajectories needed to reach the
        desired tolerance.
        """
        if self.num_trajectories <= 1:
            return np.inf
        avg = self._sum_expect / self.num_trajectories
        avg2 = self._sum2_expect / self.num_trajectories
        target = np.array([
            atol + rtol * mean
            for mean, (atol, rtol)
            in zip(avg, self._target_tols)
        ])
        traj_left = np.max((avg2 - abs(avg)**2) / target**2 + 1)
        self._tol_reached = traj_left < 0
        return traj_left

    def _target_tolerance_end(self):
        """
        Estimate the number of trajectories needed to reach desired tolerance.
        """
        if self.num_trajectories >= self._next_check:
            target = self._estimated_trajectories_to_target_tolerance()
            # We don't check the tol each trajectory since it can be slow and
            # we can have a good estimation of when it will end.
            # _next_check will be the next time we compute it.
            # For gaussian distribution, this ad hoc method usually reach the
            # target in about 10 tries without over shooting it.
            traj_left = target - self.num_trajectories
            confidence = 0.5 * (1 - 5 / self.num_trajectories)
            confidence += 0.5 / max(abs(target - self._estimated_ntraj), 1)
            self._next_check = int(
                traj_left * confidence
                + self.num_trajectories
                - 1
            )
            self._estimated_ntraj = min(target, self._target_ntraj)
        return self._estimated_ntraj - self.num_trajectories

    def _post_init(self):
        # Remove expect's processors
        self._state_processors = []
        self.trajectories = []
        self.seeds = []
        self.num_trajectories = 0

        store_states = self.options['store_states']
        store_final_state = self.options['store_final_state']
        store_traj = self.options['keep_runs_results']

        self.add_processor(self._store_seed)
        if store_traj:
            self.add_processor(self._store_trajectory)
        if store_states:
            self.add_processor(self._reduce_state)
        if store_final_state:
            self.add_processor(self._reduce_final_state)
        if self.e_ops:
            self.add_processor(self._reduce_expect)

        _early_finish_check = self._no_end

    def add(self, trajectory):
        """
        Add a trajectory to the evolution.

        Trajectories can be saved or average canbe extracted depending on the
        options ``keep_runs_results``.

        Parameters
        ----------
        trajectory : :class:`Result`
            Run result for one evolution over the times.

        Return
        ------
        remaing_traj : number
            Return the number of trajectories still needed to reach the target
            tolerance. If no tolerance is provided, return infinity.
        """
        if self.num_trajectories == 0:
            self._add_first_traj(trajectory)

        self.num_trajectories += 1

        for op in self._state_processors:
            op(trajectory)

        return self._early_finish_check()

    def set_end_condition(self, ntraj, target_tol=None):
        """
        Set the condition to stop the computing trajectories when the certain
        condition are fullfilled.
        Supported end condition for multi trajectories computation are:
        - Reaching a number of trajectories.
        - Error bar on the expectation values reach smaller than a given
          tolerance.

        Parameters
        ----------
        ntraj : int
            Number of trajectories expected.

        target_tol : float, array_like, [optional]
            Target tolerance of the evolution. The evolution will compute
            trajectories until the error on the expectation values is lower
            than this tolerance. The error is computed using jackknife
            resampling. ``target_tol`` can be an absolute tolerance, a pair of
            absolute and relative tolerance, in that order. Lastly, it can be a
            list of pairs of (atol, rtol) for each e_ops.

            Error estimation is done with jackknife resampling.
        """
        self._target_ntraj = ntraj

        if target_tol is None:
            self._early_finish_check = self._fixed_end
            return

        num_e_ops = len(self.e_ops)

        if not num_e_ops:
            raise ValueError("Cannot target a tolerance without e_ops")

        self._estimated_ntraj = ntraj
        self._tol_reached = False
        # We run at least 10 trajectories before computing error bars.
        self._next_check = 10

        targets = np.array(target_tol)
        if targets.ndim == 0:
            self._target_tols = np.array([(target_tol, 0.)] * num_e_ops)
        elif targets.shape == (2,):
            self._target_tols = np.ones((num_e_ops, 2)) * targets
        elif targets.shape == (num_e_ops, 2):
            self._target_tols = targets
        else:
            raise ValueError("target_tol must be a number, a pair of (atol, "
                             "rtol) or a list of (atol, rtol) for each e_ops")

        self._early_finish_check = self._target_tolerance_end

    @property
    def runs_states(self):
        """
        States of every runs as ``states[run][t]``.
        """
        if self.trajectories:
            return [traj.states for traj in self.trajectories]
        else:
            return None

    @property
    def average_states(self):
        """
        States averages as density matrices.
        """
        if self._sum_states is None:
            return None
        return [final / self.num_trajectories for final in self._sum_states]

    @property
    def states(self):
        """
        Runs final states if available, average otherwise.
        """
        return self.runs_states or self.average_states

    @property
    def runs_final_states(self):
        """
        Last states of each trajectories.
        """
        if self._save_traj:
            return [traj.final_state for traj in self._trajectories]
        else:
            return None

    @property
    def average_final_state(self):
        """
        Last states of each trajectories averaged into a density matrix.
        """
        if self._sum_final_states is None:
            return None
        return self._sum_final_states / self.num_trajectories

    @property
    def final_state(self):
        """
        Runs final states if available, average otherwise.
        """
        return self.runs_final_states or self.average_final_state

    @property
    def steady_state(self, N=0):
        """
        Average the states of the last ``N`` times of every runs as a density
        matrix. Should converge to the steady state in the right circumstances.

        Parameters
        ----------
        N : int [optional]
            Number of states from the end of ``tlist`` to average. Per default
            all states will be averaged.
        """
        N = int(N) or len(self.times)
        N = len(self.times) if N > len(self.times) else N
        states = self.average_states
        if states is not None:
            return sum(states[-N:]) / N
        else:
            return None

    @property
    def average_e_data(self):
        """
        Average of the expectation values.

        Return
        ------
            e_data : dict
        """
        return {
            k: sum_expect / self.num_trajectories
            for k, sum_expect in zip(self.e_ops, self._sum_expect)
        }

    average_expect = _e_data_2_expect(average_e_data)

    @property
    def std_e_data(self):
        """
        Standard derivation of the expectation values.

        Return
        ------
            e_data : dict
        """
        avg = self._sum_expect / self.num_trajectories
        avg2 = self._sum2_expect / self.num_trajectories
        return [np.sqrt(a2 - abs(a*a)) for a, a2 in zip(avg, avg2)]

    std_expect = _e_data_2_expect(std_e_data)

    @property
    def runs_e_data(self):
        """
        Expectation values for each trajectories as ``expect[e_op][run][t]``.
        Return an empty object if is run data is not saved.

        Return
        ------
            e_data : dict
        """
        return {
            k: np.stack([traj.e_data[k] for traj in self.trajectories])
            for k in self.e_ops
        }

    runs_expect = _e_data_2_expect(runs_e_data)

    @property
    def expect(self):
        """
        Runs expectation values if available, average otherwise.

        Return
        ------
            expect : list
        """
        return self.runs_expect or self.average_expect

    @property
    def e_data(self):
        """
        Runs expectation values if available, average otherwise.

        Return
        ------
            e_data : dict
        """
        return self.runs_e_data or self.average_e_data

    def e_data_traj_avg(self, ntraj=-1):
        """
        Average of the expectation values for the ``ntraj`` first runs.

        Parameters
        ----------
        ntraj : int, [optional]
            Number of trajectories's expect to average.
            Default: all trajectories.

        Return
        ------
            e_data : dict
        """
        if not self.trajectories:
            return None
        return {
            k: np.std(np.stack([
                traj.expect[k] for traj in self.trajectories[:ntraj]
            ]), axis=0)
            for k in self.e_ops
        }

    expect_traj_avg = _e_data_2_expect(e_data_traj_avg)

    def e_data_traj_std(self, ntraj=-1):
        """
        Standard derivation of the expectation values for the ``ntraj``
        first runs.

        Parameters
        ----------
        ntraj : int, [optional]
            Number of trajectories's expect to compute de standard derivation.
            Default: all trajectories.

        Return
        ------
            e_data : dict
        """
        if not self.trajectories:
            return None
        return {
            k: np.std(np.stack([
                traj.expect[k] for traj in self.trajectories[:ntraj]
            ]), axis=0)
            for k in self.e_ops
        }

    expect_traj_std = _e_data_2_expect(e_data_traj_std)

    @property
    def end_condition(self):
        if self._target_tols is not None and self._tol_reached:
            end_condition = "target tolerance reached"
        elif self._target_ntraj == self._num:
            end_condition = "ntraj reached"
        elif self._target_ntraj is not None:
            end_condition = "timeout"
        else:
            end_condition = "unknown"
        return end_condition


class McResult(MultiTrajResult):
    # Collapse are only produced by mcsolve.
    def __init__(self, e_ops, options, tlist, state0, num_c_ops, solver_id=0):
        self.num_c_ops = num_c_ops
        super().__init__(e_ops, options, tlist, state0, solver_id)
        self._collapse = []

    def add(self, one_traj):
        out = super().add(one_traj)
        self._collapse.append(one_traj.collapse)
        return out

    @property
    def collapse(self):
        """
        For each runs, a list of every collapse as a tuple of the time it
        happened and the corresponding ``c_ops`` index.
        """
        return self._collapse

    @property
    def col_times(self):
        """
        List of the times of the collapses for each runs.
        """
        out = []
        for col_ in self.collapse:
            col = list(zip(*col_))
            col = ([] if len(col) == 0 else col[0])
            out.append(col)
        return out

    @property
    def col_which(self):
        """
        List of the indexes of the collapses for each runs.
        """
        out = []
        for col_ in self.collapse:
            col = list(zip(*col_))
            col = ([] if len(col) == 0 else col[1])
            out.append(col)
        return out

    @property
    def photocurrent(self):
        """
        Average photocurrent or measurement of the evolution.
        """
        cols = [[] for _ in range(self.num_c_ops)]
        tlist = self.times
        for collapses in self.collapse:
            for t, which in collapses:
                cols[which].append(t)
        mesurement = [
            np.histogram(cols[i], tlist)[0] / np.diff(tlist) / self._num
            for i in range(self.num_c_ops)
        ]
        return mesurement

    @property
    def runs_photocurrent(self):
        """
        Photocurrent or measurement of each runs.
        """
        tlist = self.times
        measurements = []
        for collapses in self.collapse:
            cols = [[] for _ in range(self.num_c_ops)]
            for t, which in collapses:
                cols[which].append(t)
            measurements.append([
                np.histogram(cols[i], tlist)[0] / np.diff(tlist)
                for i in range(self.num_c_ops)
            ])
        return measurements

    @property
    def num_collapse(self):
        return self.num_c_ops
